// Code generated by MockGen. DO NOT EDIT.
// Source: integration-vanceai/internal/json/vanceai/v1 (interfaces: JConfigEncoder)

// Package mock is a generated GoMock package.
package mock

import (
	jconfig "comixifier/internal/vanceai/json/vanceai/v1/jconfig"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJConfigEncoder is a mock of JConfigEncoder interface.
type MockJConfigEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockJConfigEncoderMockRecorder
}

// MockJConfigEncoderMockRecorder is the mock recorder for MockJConfigEncoder.
type MockJConfigEncoderMockRecorder struct {
	mock *MockJConfigEncoder
}

// NewMockJConfigEncoder creates a new mock instance.
func NewMockJConfigEncoder(ctrl *gomock.Controller) *MockJConfigEncoder {
	mock := &MockJConfigEncoder{ctrl: ctrl}
	mock.recorder = &MockJConfigEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJConfigEncoder) EXPECT() *MockJConfigEncoderMockRecorder {
	return m.recorder
}

// DoSingleJob mocks base method.
func (m *MockJConfigEncoder) DoSingleJob(arg0 *jconfig.SingleJob) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSingleJob", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSingleJob indicates an expected call of DoSingleJob.
func (mr *MockJConfigEncoderMockRecorder) DoSingleJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSingleJob", reflect.TypeOf((*MockJConfigEncoder)(nil).DoSingleJob), arg0)
}

// DoWorkflow mocks base method.
func (m *MockJConfigEncoder) DoWorkflow(arg0 *jconfig.Workflow) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWorkflow", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoWorkflow indicates an expected call of DoWorkflow.
func (mr *MockJConfigEncoderMockRecorder) DoWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWorkflow", reflect.TypeOf((*MockJConfigEncoder)(nil).DoWorkflow), arg0)
}
