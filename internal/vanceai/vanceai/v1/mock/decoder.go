// Code generated by MockGen. DO NOT EDIT.
// Source: integration-vanceai/internal/json/vanceai/v1 (interfaces: ResponseDecoder)

// Package mock is a generated GoMock package.
package mock

import (
	v1 "comixifier/internal/vanceai/json/vanceai/v1"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResponseDecoder is a mock of ResponseDecoder interface.
type MockResponseDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockResponseDecoderMockRecorder
}

// MockResponseDecoderMockRecorder is the mock recorder for MockResponseDecoder.
type MockResponseDecoderMockRecorder struct {
	mock *MockResponseDecoder
}

// NewMockResponseDecoder creates a new mock instance.
func NewMockResponseDecoder(ctrl *gomock.Controller) *MockResponseDecoder {
	mock := &MockResponseDecoder{ctrl: ctrl}
	mock.recorder = &MockResponseDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseDecoder) EXPECT() *MockResponseDecoderMockRecorder {
	return m.recorder
}

// ToErrorResponse mocks base method.
func (m *MockResponseDecoder) ToErrorResponse(arg0 io.Reader) (*v1.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToErrorResponse", arg0)
	ret0, _ := ret[0].(*v1.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToErrorResponse indicates an expected call of ToErrorResponse.
func (mr *MockResponseDecoderMockRecorder) ToErrorResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToErrorResponse", reflect.TypeOf((*MockResponseDecoder)(nil).ToErrorResponse), arg0)
}

// ToProgressResponse mocks base method.
func (m *MockResponseDecoder) ToProgressResponse(arg0 io.Reader) (*v1.ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToProgressResponse", arg0)
	ret0, _ := ret[0].(*v1.ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToProgressResponse indicates an expected call of ToProgressResponse.
func (mr *MockResponseDecoderMockRecorder) ToProgressResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToProgressResponse", reflect.TypeOf((*MockResponseDecoder)(nil).ToProgressResponse), arg0)
}

// ToTransformResponse mocks base method.
func (m *MockResponseDecoder) ToTransformResponse(arg0 io.Reader) (*v1.TransformResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTransformResponse", arg0)
	ret0, _ := ret[0].(*v1.TransformResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToTransformResponse indicates an expected call of ToTransformResponse.
func (mr *MockResponseDecoderMockRecorder) ToTransformResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTransformResponse", reflect.TypeOf((*MockResponseDecoder)(nil).ToTransformResponse), arg0)
}

// ToUploadResponse mocks base method.
func (m *MockResponseDecoder) ToUploadResponse(arg0 []byte) (*v1.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUploadResponse", arg0)
	ret0, _ := ret[0].(*v1.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToUploadResponse indicates an expected call of ToUploadResponse.
func (mr *MockResponseDecoderMockRecorder) ToUploadResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUploadResponse", reflect.TypeOf((*MockResponseDecoder)(nil).ToUploadResponse), arg0)
}
