// Code generated by MockGen. DO NOT EDIT.
// Source: integration-vanceai/internal/http/vanceai/v1 (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	v1 "comixifier/internal/vanceai/http/vanceai/v1"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendDownloadRequest mocks base method.
func (m *MockClient) SendDownloadRequest(arg0 *v1.DownloadRequest) (*v1.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDownloadRequest", arg0)
	ret0, _ := ret[0].(*v1.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDownloadRequest indicates an expected call of SendDownloadRequest.
func (mr *MockClientMockRecorder) SendDownloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDownloadRequest", reflect.TypeOf((*MockClient)(nil).SendDownloadRequest), arg0)
}

// SendProgressRequest mocks base method.
func (m *MockClient) SendProgressRequest(arg0 *v1.ProgressRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProgressRequest", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendProgressRequest indicates an expected call of SendProgressRequest.
func (mr *MockClientMockRecorder) SendProgressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProgressRequest", reflect.TypeOf((*MockClient)(nil).SendProgressRequest), arg0)
}

// SendTransformRequest mocks base method.
func (m *MockClient) SendTransformRequest(arg0 *v1.TransformRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransformRequest", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransformRequest indicates an expected call of SendTransformRequest.
func (mr *MockClientMockRecorder) SendTransformRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransformRequest", reflect.TypeOf((*MockClient)(nil).SendTransformRequest), arg0)
}

// SendUploadRequest mocks base method.
func (m *MockClient) SendUploadRequest(arg0 *v1.UploadRequest) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUploadRequest", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUploadRequest indicates an expected call of SendUploadRequest.
func (mr *MockClientMockRecorder) SendUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUploadRequest", reflect.TypeOf((*MockClient)(nil).SendUploadRequest), arg0)
}
