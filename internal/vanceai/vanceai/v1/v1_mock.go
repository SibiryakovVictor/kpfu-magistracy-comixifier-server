// Code generated by MockGen. DO NOT EDIT.
// Source: integration-vanceai/internal/vanceai/v1 (interfaces: VanceAI)

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVanceAI is a mock of VanceAI interface.
type MockVanceAI struct {
	ctrl     *gomock.Controller
	recorder *MockVanceAIMockRecorder
}

// MockVanceAIMockRecorder is the mock recorder for MockVanceAI.
type MockVanceAIMockRecorder struct {
	mock *MockVanceAI
}

// NewMockVanceAI creates a new mock instance.
func NewMockVanceAI(ctrl *gomock.Controller) *MockVanceAI {
	mock := &MockVanceAI{ctrl: ctrl}
	mock.recorder = &MockVanceAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVanceAI) EXPECT() *MockVanceAIMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockVanceAI) Download(arg0 *DownloadRequest) (*DownloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0)
	ret0, _ := ret[0].(*DownloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockVanceAIMockRecorder) Download(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockVanceAI)(nil).Download), arg0)
}

// Progress mocks base method.
func (m *MockVanceAI) Progress(arg0 *ProgressRequest) (*ProgressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Progress", arg0)
	ret0, _ := ret[0].(*ProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Progress indicates an expected call of Progress.
func (mr *MockVanceAIMockRecorder) Progress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Progress", reflect.TypeOf((*MockVanceAI)(nil).Progress), arg0)
}

// Transform mocks base method.
func (m *MockVanceAI) Transform(arg0 *TransformRequest) (*TransformResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", arg0)
	ret0, _ := ret[0].(*TransformResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockVanceAIMockRecorder) Transform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockVanceAI)(nil).Transform), arg0)
}

// Upload mocks base method.
func (m *MockVanceAI) Upload(arg0 *UploadRequest) (*UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(*UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockVanceAIMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockVanceAI)(nil).Upload), arg0)
}
